package ee.itcollege.snake.game;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Iterator;

import javax.swing.JPanel;

import ee.itcollege.snake.elements.Apple;
import ee.itcollege.snake.elements.Snake;
import ee.itcollege.snake.lib.CollisionDetector;

/**
 * The main game object that draws the gamefield
 */
public class GameField extends JPanel {

	private Snake snake = new Snake();
	private Image buffer;
	private ArrayList<Apple> apples = new ArrayList<>();
	
	public void tick() {
		snake.move();
		
		// create apples
		while (apples.size() < 3) {
			apples.add(new Apple((int)(Math.random() * getWidth()),
					(int)(Math.random() * getHeight())
					));
		
		for (int i = 0; i < apples.size(); i++ ) {
			Apple apple = apples.get(i);
			if (CollisionDetector.collide(snake, apple)) {
			snake.eat(apples.remove(i--));
		}
		}

		
		}
		repaint();
	}

	private Image getBuffer() {
		if (null == buffer) {
			// if there is no buffer object, create a new Image
			buffer = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB);
		}
		// fill the image with white
		Graphics g = buffer.getGraphics();
		g.setColor(Color.white);
		g.fillRect(0, 0, getWidth(), getHeight());

		return buffer;
	}

	@Override
	public void paintComponent(Graphics g) {
		Image buffer = getBuffer();
		Graphics2D g2 = (Graphics2D) buffer.getGraphics();
		g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		for (Apple apple : apples) {
			apple.drawItself(g2);	
		}
		snake.drawItself(g2);

		g.drawImage(buffer, 0, 0, null);
	}

	public Snake getSnake() {
		return snake;
	}
}
